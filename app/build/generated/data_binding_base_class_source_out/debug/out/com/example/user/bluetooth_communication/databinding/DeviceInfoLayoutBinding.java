// Generated by view binder compiler. Do not edit!
package com.example.user.bluetooth_communication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.user.bluetooth_communication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DeviceInfoLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final View divider;

  @NonNull
  public final LinearLayout linearLayoutDeviceInfo;

  @NonNull
  public final TextView notFound;

  @NonNull
  public final TextView textViewDeviceAddress;

  @NonNull
  public final TextView textViewDeviceName;

  private DeviceInfoLayoutBinding(@NonNull LinearLayout rootView, @NonNull View divider,
      @NonNull LinearLayout linearLayoutDeviceInfo, @NonNull TextView notFound,
      @NonNull TextView textViewDeviceAddress, @NonNull TextView textViewDeviceName) {
    this.rootView = rootView;
    this.divider = divider;
    this.linearLayoutDeviceInfo = linearLayoutDeviceInfo;
    this.notFound = notFound;
    this.textViewDeviceAddress = textViewDeviceAddress;
    this.textViewDeviceName = textViewDeviceName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DeviceInfoLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DeviceInfoLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.device_info_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DeviceInfoLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.linearLayoutDeviceInfo;
      LinearLayout linearLayoutDeviceInfo = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutDeviceInfo == null) {
        break missingId;
      }

      id = R.id.notFound;
      TextView notFound = ViewBindings.findChildViewById(rootView, id);
      if (notFound == null) {
        break missingId;
      }

      id = R.id.textViewDeviceAddress;
      TextView textViewDeviceAddress = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeviceAddress == null) {
        break missingId;
      }

      id = R.id.textViewDeviceName;
      TextView textViewDeviceName = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeviceName == null) {
        break missingId;
      }

      return new DeviceInfoLayoutBinding((LinearLayout) rootView, divider, linearLayoutDeviceInfo,
          notFound, textViewDeviceAddress, textViewDeviceName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
